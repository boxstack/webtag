@{
  Page.Title = "Edit Item";

  string appDatabaseName = App.appDatabaseName;      
  var id = "";
  var tag = "";
  var po = "";
  var desc = "";
  var serno = "";
  var model = "";
  var appby = "";
  var appdate = "";
  var cost = "";
  var acquired = "";

  WebGrid grid = null;
  Boolean disposed = false;

  Validation.Add( "tag",
    Validator.Required( "Please specify the tag" ),
    Validator.Regex( @"^\d{4}$", "Tag must be four (4) digits" )
  );
  Validation.Add( "desc",
    Validator.Required( "An item description is required" )
  );
  Validation.Add( "serno",
    Validator.Required( "Please provide the item serial number" )
  );
  Validation.Add( "model",
    Validator.Required( "The item model is required" )
  );
  Validation.Add( "appdate",
    Validator.Regex( "^([0-9]{1,2})/([0-9]{1,2})/([0-9]{2}|[0-9]{4})$",
      "Please enter date formatted MM/DD/YYYY" ),
    Validator.DateTime( "If provided, date must be valid (MM/DD/YYYY)" )
  );
  Validation.Add( "cost",
    Validator.Decimal( "If provided, cost must be decimal" )
  );
  Validation.Add( "acquired",
    Validator.Regex( "^([0-9]{1,2})/([0-9]{1,2})/([0-9]{2}|[0-9]{4})$",
      "Please enter date formatted MM/DD/YYYY" ),
    Validator.DateTime( "If provided, date must be valid (MM/DD/YYYY)" )
  );

  var db = Database.Open( appDatabaseName );

  if ( IsPost ) {    
    id = Request.Form["id"];

    tag = Request.Form["tag"].ToUpper();
    po = Request.Form["po"].ToUpper();
    desc = Request.Form["desc"].ToUpper();
    serno = Request.Form["serno"].ToUpper();
    model = Request.Form["model"].ToUpper();
    appby = Request.Form["appby"].ToUpper();
    appdate = Request.Form["appdate"];
    cost = Request.Form["cost"].ToUpper();
    acquired = Request.Form["acquired"];

    if ( !Request["buttonUpdate"].IsEmpty() && Validation.IsValid() ) {
      var updateCommand = "UPDATE Items SET " +
                          "Tag=@0, PONumber=@1, Description=@2, SerialNumber=@3, " +
                          "Model=@4, AppliedBy=@5, Cost=@6, Acquired=NULL, AppliedByDate=NULL " +
                          "WHERE ID=@7";
      db.Execute( updateCommand, tag, po, desc, serno, model, appby, cost, id );

      if ( acquired.Length > 0 ) {
        updateCommand = "UPDATE Items SET " +
                        "Acquired=@0 " +
                        "WHERE Tag=@1";
        db.Execute( updateCommand, acquired, tag );
      }

      if ( appdate.Length > 0 ) {
        updateCommand = "UPDATE Items SET " +
                        "AppliedByDate=@0 " +
                        "WHERE ID=@1";
        db.Execute( updateCommand, appdate, id );
      }

      Response.Redirect( "~/ViewItem?id=" + id );
    }
  } else {
    if ( !Request.QueryString["id"].IsEmpty() && Request.QueryString["id"].IsInt() ) {
      id = Request.QueryString["id"];

      var selectItemCommand = "SELECT * FROM Items WHERE ID = @0";
      var item = db.QuerySingle( selectItemCommand, id );

      if ( item != null ) {
        tag = item.Tag;
        po = item.PONumber;
        desc = item.Description;
        serno = item.SerialNumber;
        model = item.Model;
        appby = item.AppliedBy;
        cost = item.Cost;

        if ( item.Acquired != null ) {
          acquired = item.Acquired.ToString( "MM/dd/yyyy" );
        }

        if ( item.AppliedByDate != null ) {
          appdate = item.AppliedByDate.ToString( "MM/dd/yyyy" );
        }

        if ( item.DisposeDate != null ) {
          disposed = true;
        }

        if ( disposed ) {
          Validation.AddFormError( "This Item was disposed" );
        }

        var selectMovesCommand = "SELECT * FROM Moves WHERE ItemID = @0";
        var searchTerm = Request.QueryString["id"];

        var selectedData = db.Query( selectMovesCommand, searchTerm );

        if ( selectedData.Any() ) {
          grid = new WebGrid( source: selectedData, defaultSort: "MoveDate", rowsPerPage: 4 );
        
          if ( Request.QueryString[grid.SortDirectionFieldName].IsEmpty() ) {
            grid.SortDirection = SortDirection.Descending;
          }          
        }     

      } else {
        Validation.AddFormError( "No Item was found with specified ID" );  
      }

      if ( !Request.QueryString["tag"].IsEmpty() ) {
        Validation.AddFormError( "Editing existing Item" );
      }
    } else {
       Validation.AddFormError( "No Item was selected" );
    }
  }    
}

<!-- <html> from layout -->
  <!-- <body> from layout -->
    <h2>Edit Item</h2>
    @Html.ValidationSummary()
    <p>
      <a href="~/ViewItem?id=@id">Return to View Item</a>
    </p>

    <form method="post">
      <fieldset>
        <legend>Item Information</legend>

        <div>
          <label for="tag">Tag:</label>
          <input type="text" name="tag" value="@tag" @Validation.For("tag") />
          @Html.ValidationMessage( "tag" )
          <br />
        </div>

        <div>
          <label for="po">PO Number:</label>
          <input type="text" name="po" value="@po" />
          <br />
        </div>

        <div>
          <label for="cost">Cost:</label>
          <input type="text" name="cost" value="@cost" @Validation.For("cost") />
          @Html.ValidationMessage( "cost" )
          <br />
        </div>

        <div>
          <label for="acquired">Acquired:</label>
          <input type="text" name="acquired" value="@acquired" @Validation.For("acquired") />
          @Html.ValidationMessage( "acquired" )
          <br />
        </div>

        <div>
          <label for="desc">Description:</label>
          <input type="text" name="desc" value="@desc" @Validation.For("desc") />
          @Html.ValidationMessage( "desc" )
          <br />
        </div>

        <div>
          <label for="serno">Serial Number:</label>
          <input type="text" name="serno" value="@serno" @Validation.For("serno") />
          @Html.ValidationMessage( "serno" )
          <br />
        </div>

        <div>
          <label for="model">Model:</label>
          <input type="text" name="model" value="@model" @Validation.For("model") /> 
          @Html.ValidationMessage( "model")
          <br />
        </div>

        <div>
          <label for="appby">Tag Applied By:</label>
          <input type="text" name="appby" value="@appby" />
          <br />
        </div>

        <div>
          <label for="appdate">Date Applied:</label>
          <input type="text" name="appdate" value="@appdate" @Validation.For("appdate") />
          @Html.ValidationMessage( "appdate" )
          <br />
        </div>

        <input type="hidden" name="id" value="@id" />

        <div>
          <input type="submit" name="buttonUpdate" value="Update" class="submitbutton" />
        </div>
      </fieldset>
    </form>

    @if ( grid != null ) {
      <div>
        @grid.GetHtml(
          tableStyle: "grid",
          headerStyle: "head",
          alternatingRowStyle: "alt",
          columns: grid.Columns(
            grid.Column(format: @<a href="~/EditMove?id=@id&moveid=@item.ID">Edit</a>),
            grid.Column( "MoveDate", "Moved",
              format: (item) => item.MoveDate == null ?
                string.Empty : string.Format( "{0:MM/dd/yyyy}", item.MoveDate )
            ),
            grid.Column("Location"),
            grid.Column("AssignedTo", "Assigned To"),
            grid.Column(format: @<a href="~/DeleteMove?id=@id&moveid=@item.ID">Delete</a>)
          )
        )
      </div>        
    }
